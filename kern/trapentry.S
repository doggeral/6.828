/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */

#define TRAPHANDLER(name, num)						\
	.text;	\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps;	\
	.data;	\
	.long name

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.text;	\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps;	\
	.data;	\
	.long name

# .text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
#if 0
#define T_DIVIDE     0		// divide error
#define T_DEBUG      1		// debug exception
#define T_NMI        2		// non-maskable interrupt
#define T_BRKPT      3		// breakpoint
#define T_OFLOW      4		// overflow
#define T_BOUND      5		// bounds check
#define T_ILLOP      6		// illegal opcode
#define T_DEVICE     7		// device not available
#define T_DBLFLT     8		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
#define T_TSS       10		// invalid task switch segment
#define T_SEGNP     11		// segment not present
#define T_STACK     12		// stack exception
#define T_GPFLT     13		// general protection fault
#define T_PGFLT     14		// page fault
/* #define T_RES    15 */	// reserved
#define T_FPERR     16		// floating point error
#define T_ALIGN     17		// aligment check
#define T_MCHK      18		// machine check
#define T_SIMDERR   19		// SIMD floating point error

// These are arbitrarily chosen, but with care not to overlap
// processor defined exceptions or interrupt vectors.
#define T_SYSCALL   48		// system call
#define T_DEFAULT   500		// catchall
#endif

/*
* code from xv6
* if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
*        print "  pushl \$0\n";
*/

.data
.globl vectors
vectors:
TRAPHANDLER_NOEC(vector0, T_DIVIDE);			//0
TRAPHANDLER_NOEC(vector1, T_DEBUG);			//1
TRAPHANDLER_NOEC(vector2, T_NMI);			//2
TRAPHANDLER_NOEC(vector3, T_BRKPT);			//3
TRAPHANDLER_NOEC(vector4, T_OFLOW);			//4
TRAPHANDLER_NOEC(vector5, T_BOUND);			//5
TRAPHANDLER_NOEC(vector6, T_ILLOP);			//6
TRAPHANDLER_NOEC(vector7, T_DEVICE);			//7
TRAPHANDLER(vector8, T_DBLFLT);	//8
TRAPHANDLER_NOEC(vector9, 9);				//9
TRAPHANDLER(vector10, T_TSS);		//10
TRAPHANDLER(vector11, T_SEGNP);				//11
TRAPHANDLER(vector12, T_STACK);				//12
TRAPHANDLER(vector13, T_GPFLT);				//13
TRAPHANDLER(vector14, T_PGFLT);				//14
TRAPHANDLER_NOEC(vector15, 15);				//15
TRAPHANDLER_NOEC(vector16, T_FPERR);		//16
TRAPHANDLER(vector17, T_ALIGN);				//17
TRAPHANDLER_NOEC(vector18, T_MCHK);			//18
TRAPHANDLER_NOEC(vector19, T_SIMDERR);		//19
TRAPHANDLER_NOEC(vector48, T_SYSCALL);		//30 syscall
/*
 * Lab 3: Your code here for _alltraps
 */
 .text
 _alltraps:
  # push values to make the stack look like a struct Trapframe
  pushl %ds
  pushl %es
  pushal
  # load GD_KD into %ds and %es
  movw $GD_KD, %ax
  movw %ax, %ds
  movw %ax, %es
  # pushl %esp to pass a pointer to the Trapframe as an argument to trap()
  pushl %esp
  call trap
  # because of the env_run of trap, we do not need to call iret

